generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id             String        @id @default(cuid())
  fullName       String?
  username       String        @unique
  email          String        @unique
  password       String
  phoneNumber    String?
  role           Role          @default(USER)
  status         AccountStatus @default(INACTIVE)
  isVerified     Boolean       @default(false)
  lastLogin      DateTime?
  credits        Int           @default(5)
  profilePicture String        @default("https://www.mauicardiovascularsymposium.com/wp-content/uploads/2019/08/dummy-profile-pic-300x300.png")

  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @updatedAt
  Profile    Profile?
  Onboarding Onboarding?
  Timeline   Timeline[]
  MileStone  MileStone[]
  Journal    Journal[]
}

enum Role {
  ADMIN
  USER
  MODERATOR
}

enum AccountStatus {
  ACTIVE
  INACTIVE
  SUSPENDED
}

model Profile {
  id          String   @id @default(cuid())
  bio         String?
  headline    String?
  location    String?
  timezone    String?
  language    String   @default("English")
  skills      String[]
  careerStage String?
  userId      String   @unique
  user        User     @relation(fields: [userId], references: [id])
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Onboarding {
  id                  String         @id @default(cuid())
  userId              String         @unique
  user                User           @relation(fields: [userId], references: [id])
  onboardingStep      Int            @default(0)
  primaryGoalCategory GoalCategory?
  topGoals            String[]
  timeHorizon         TimeHorizon?
  riskTolerance       RiskTolerance?
  preferredView       PreferredView?
  interests           String[]
  referralSource      String? // "Friend", "LinkedIn", "Ad"
  referralID          String?

  completedAt DateTime?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

enum GoalCategory {
  CAREER
  EDUCATION
  HEALTH
  FINANCE
  PERSONAL_GROWTH
  ENTREPRENEURSHIP
}

enum TimeHorizon {
  ONE_YEAR
  THREE_YEARS
  FIVE_YEARS
}

enum RiskTolerance {
  LOW
  MEDIUM
  HIGH
}

enum PreferredView {
  TIMELINE
  ROADMAP
  CALENDAR
}

enum TimelineCategory {
  CAREER
  EDUCATION
  PERSONAL
  FITNESS
  FINANCE
  ENTREPRENEURSHIP
}

model Timeline {
  id               String           @unique @default(cuid())
  name             String
  category         TimelineCategory @default(CAREER)
  duration         TimeHorizon      @default(ONE_YEAR)
  startDate        DateTime         @default(now())
  endDate          DateTime
  risk_challanges  String[]
  resources_needed String[]
  milestones       MileStone[]
  ai_suggestions   Json[]           @default([])
  isPublic         Boolean          @default(false)

  user   User   @relation(fields: [userId], references: [id])
  userId String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum Priority {
  LOW
  MEDIUM
  HIGH
}

enum Status {
  NOT_STARTED
  IN_PROGRESS
  COMPLETED
}

model MileStone {
  id             String       @unique @default(cuid())
  title          String
  description    String
  targetDate     DateTime
  status         Status       @default(NOT_STARTED)
  priority       Priority     @default(MEDIUM)
  tags           String[]
  ai_suggestions Json[]       @default([])
  user           User         @relation(fields: [userId], references: [id])
  userId         String
  Timeline       Timeline?    @relation(fields: [timelineId], references: [id])
  timelineId     String?
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  SubTask        SubTask[]
  Reflection     Reflection[]
}

model SubTask {
  id          String    @id @default(cuid())
  title       String
  mileStone   MileStone @relation(fields: [mileStoneId], references: [id])
  mileStoneId String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model Reflection {
  id          String    @id @default(cuid())
  note        String
  mileStone   MileStone @relation(fields: [mileStoneId], references: [id])
  mileStoneId String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}


enum MOOD{
  HAPPY
  SAD
  NEUTRAL
  EXCITED
  ANXIOUS
  GRATEFUL
  STRESSED
  MOTIVATED
  REFLECTIVE
}
model Journal{
  id String @id @default(cuid())
  user User @relation(fields: [userId], references: [id])
  userId String
  title String
  content String
  tags String[]
  mood MOOD @default(REFLECTIVE)
  ai_suggestions Json[] @default([])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

}